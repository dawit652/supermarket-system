package com.supermarket.application.models;

public class Branch {
    private int id;
    private String name;
    private String location;

    // Constructor
    public Branch(int id, String name, String location) {
        this.id = id;
        this.name = name;
        this.location = location;
    }

    // Getters and Setters
    public int getId() { return id; }
    public String getName() { return name; }
    public String getLocation() { return location; }

    public void setId(int id) { this.id = id; }
    public void setName(String name) { this.name = name; }
    public void setLocation(String location) { this.location = location; }

    // Override toString() to display branch name in ComboBox
    @Override
    public String toString() {
        return name;  // JavaFX will now display the branch name instead of the object reference
    }
}
    package com.supermarket.models;

public class Customer {
    private int id;
    private String name;
    private String phoneNumber;
    private int loyaltyPoints;

    // Constructor
    public Customer(int id, String name, String phoneNumber, int loyaltyPoints) {
        this.id = id;
        this.name = name;
        this.phoneNumber = phoneNumber;
        this.loyaltyPoints = loyaltyPoints;
    }

    // Getters and Setters
    public int getId() { return id; }
    public String getName() { return name; }
    public String getPhoneNumber() { return phoneNumber; }
    public int getLoyaltyPoints() { return loyaltyPoints; }

    public void setId(int id) { this.id = id; }
    public void setName(String name) { this.name = name; }
    public void setPhoneNumber(String phoneNumber) { this.phoneNumber = phoneNumber; }
    public void setLoyaltyPoints(int loyaltyPoints) { this.loyaltyPoints = loyaltyPoints; }
}                                                         package com.supermarket.application.models;

public class Product {
    private int id;
    private String name;
    private String barcode;
    private double price;
    private int stock;
    private int branchId;

    // Constructor with ID (for fetching from the database)
    public Product(int id, String name, String barcode, double price, int stock, int branchId) {
        this.id = id;
        this.name = name;
        this.barcode = barcode;
        this.price = price;
        this.stock = stock;
        this.branchId = branchId;
    }

    // Constructor without ID (for creating new products)
    public Product(String name, String barcode, double price, int stock, int branchId) {
        this.name = name;
        this.barcode = barcode;
        this.price = price;
        this.stock = stock;
        this.branchId = branchId;
    }

    // Getters and Setters
    public int getId() { return id; }
    public String getName() { return name; }
    public String getBarcode() { return barcode; }
    public double getPrice() { return price; }
    public int getStock() { return stock; }
    public int getBranchId() { return branchId; }

    public void setId(int id) { this.id = id; }
    public void setName(String name) { this.name = name; }
    public void setBarcode(String barcode) { this.barcode = barcode; }
    public void setPrice(double price) { this.price = price; }
    public void setStock(int stock) { this.stock = stock; }
    public void setBranchId(int branchId) { this.branchId = branchId; }
}                                                      package com.supermarket.application.models;

import java.util.Date;
import java.util.List;

public class Sale {
    private int id;
    private Date saleDate;
    private List<com.supermarket.application.models.Product> products;
    private double totalPrice;
    private double discount;
    private int branchId;

    // Constructor
    public Sale(int id, Date saleDate, List<com.supermarket.application.models.Product> products, double totalPrice, double discount, int branchId) {
        this.id = id;
        this.saleDate = saleDate;
        this.products = products;
        this.totalPrice = totalPrice;
        this.discount= discount;
        this.branchId= branchId;

    }

    // Getters and Setters
    // Getters and Setters
    public double getDiscount() { return discount; }
    public int getId() { return id; }
    public Date getSaleDate() { return saleDate; }
    public List<com.supermarket.application.models.Product> getProducts() { return products; }
    public double getTotalPrice() { return totalPrice; }
    public int getBranchId() { return branchId; }

    public void setId(int id) { this.id = id; }
    public void setDiscount(double discount) { this.discount = discount; }
    public void setSaleDate(Date saleDate) { this.saleDate = saleDate; }
    public void setProducts(List<com.supermarket.application.models.Product> products) { this.products = products; }
    public void setTotalPrice(double totalPrice) { this.totalPrice = totalPrice; }
    public void setBranchId(int branchId) { this.branchId = branchId; }
}                                              package com.supermarket.application.models;

public class User {
    private int id;
    private String username;
    private String password;
    private String role;
    private int branchId; // New field for branch association

    // Constructor with ID (for fetching from the database)
    public User(int id, String username, String password, String role, int branchId) {
        this.id = id;
        this.username = username;
        this.password = password;
        this.role = role;
        this.branchId = branchId;
    }

    // Constructor without ID (for creating new users)
    public User(String username, String password, String role, int branchId) {
        this.username = username;
        this.password = password;
        this.role = role;
        this.branchId = branchId;
    }

    // Getters and Setters
    public int getId() {
        return id;
    }

    public void setId(int id) {
        this.id = id;
    }

    public String getUsername() {
        return username;
    }

    public void setUsername(String username) {
        this.username = username;
    }

    public String getPassword() {
        return password;
    }

    public void setPassword(String password) {
        this.password = password;
    }

    public String getRole() {
        return role;
    }

    public void setRole(String role) {
        this.role = role;
    }

    public int getBranchId() {
        return branchId;
    }

    public void setBranchId(int branchId) {
        this.branchId = branchId;
    }
}                                        package com.supermarket.application.services;

import com.supermarket.application.models.Branch;
import com.supermarket.data.dao.BranchDAO;

import java.sql.SQLException;
import java.util.List;

public class BranchService {
    private final BranchDAO branchDAO;

    public BranchService() {
        this.branchDAO = new BranchDAO();
    }

    public List<Branch> getAllBranches() throws SQLException {
        return branchDAO.getAllBranches();



    }
}
                                     package com.supermarket.application.services;

import com.supermarket.application.models.Product;
import com.supermarket.data.dao.ProductDAO;
import java.sql.SQLException;
import java.util.List;

public class ProductService {
    private final ProductDAO productDAO;

    public ProductService() {
        this.productDAO = new ProductDAO();
    }

    // Add a new product with validation
    public void addProduct(Product product) throws SQLException, IllegalArgumentException {
        if (product.getPrice() <= 0) {
            throw new IllegalArgumentException("Price must be greater than 0.");
        }
        if (product.getStock() < 0) {
            throw new IllegalArgumentException("Stock cannot be negative.");
        }
        productDAO.addProduct(product);
    }


    // Get all products
    public List<Product> getAllProducts(int branchId) throws SQLException {
        return productDAO.getAllProducts(branchId);
    }

    // Update a product
    public void updateProduct(Product product) throws SQLException, IllegalArgumentException {
        if (product.getPrice() <= 0) {
            throw new IllegalArgumentException("Price must be greater than 0.");
        }
        if (product.getStock() < 0) {
            throw new IllegalArgumentException("Stock cannot be negative.");
        }
        productDAO.updateProduct(product);
    }

    // Delete a product
    public void deleteProduct(int id) throws SQLException {
        productDAO.deleteProduct(id);
    }



}                                                package com.supermarket.application.services;

import com.supermarket.data.dao.SalesDAO;
import com.supermarket.application.models.Sale;

import java.sql.SQLException;
import java.util.Date; // Use java.util.Date
import java.util.List;

public class SalesService {
    private final SalesDAO saleDAO = new SalesDAO();
    public void addSale(Sale sale) throws SQLException {
        saleDAO.addSale(sale);
    }

    public void processSale(Sale sale) throws SQLException {
        double totalPrice = sale.getTotalPrice();
        double discount = sale.getDiscount();
        double finalPrice = totalPrice - (totalPrice * discount / 100); // Apply discount
        sale.setTotalPrice(finalPrice);
        saleDAO.addSale(sale);
    }


    public List<Sale> getSalesForToday(int branchId) throws SQLException {
        Date date = new Date(); // Use the current date
        return saleDAO.getSalesByDate(date);
    }

    public List<Sale> getSalesByBranch(int branchId) throws SQLException {
        return saleDAO.getSalesByBranch(branchId);
    }
}                                               package com.supermarket.application.services;

import com.supermarket.application.models.User;
import com.supermarket.data.dao.UserDAO;
import com.supermarket.utils.PasswordUtil;
import javafx.stage.Stage;

import java.sql.SQLException;
import java.util.List;

public class UserService {
    private final UserDAO userDAO;

    public UserService() {
        this.userDAO = new UserDAO();
    }

    /**
     * Adds a new user with a hashed password.
     *
     * @param user The user to add.
     * @throws SQLException If a database error occurs.
     */
    public void addUser(User user) throws SQLException {
        String hashedPassword = PasswordUtil.hashPassword(user.getPassword());
        user.setPassword(hashedPassword); // Replace plain-text password with hashed version
        userDAO.addUser(user);
    }

    /**
     * Updates an existing user with a hashed password if the password is updated.
     *
     * @param user The user to update.
     * @throws SQLException If a database error occurs.
     */


    /**
     * Fetches a user by username.
     *
     * @param username The username to search for.
     * @return The user object if found, null otherwise.
     * @throws SQLException If a database error occurs.
     */
    public User getUserByUsername(String username) throws SQLException {
        return userDAO.getUserByUsername(username);
    }

    /**
     * Authenticates a user by verifying their hashed password.
     *
     * @param username The username to authenticate.
     * @param password The plain-text password to verify.
     * @return True if authentication succeeds, false otherwise.
     * @throws SQLException If a database error occurs.
     */
    public boolean authenticate(String username, String password) throws SQLException {
        User user = userDAO.getUserByUsername(username);
        if (user != null) {
            String storedHash = user.getPassword();
            System.out.println("Stored Hash: " + storedHash); // Log the stored hash
            System.out.println("Input Password: " + password); // Log the input password
            boolean isMatch = PasswordUtil.verifyPassword(password, storedHash);
            System.out.println("Password Match: " + isMatch); // Log the result of verification
            return isMatch;
        }
        return false;
    }
    public List<User> getAllUsers() throws SQLException {
        return userDAO.getAllUsers(); // Delegate to the DAO layer
    }

    public void updateUser(User user) throws SQLException {
        if (!user.getPassword().startsWith("$2")) { // Check if the password is already hashed
            String hashedPassword = PasswordUtil.hashPassword(user.getPassword());
            user.setPassword(hashedPassword); // Replace plain-text password with hashed version
        }
        userDAO.updateUser(user);
    }


    /**
     * Deletes a user from the database.
     *
     * @param id The ID of the user to delete.
     * @throws SQLException If a database error occurs.
     */
    public void deleteUser(int id) throws SQLException {
        userDAO.deleteUser(id);
    }
}                                                     package com.supermarket.data.dao;

import com.supermarket.application.models.Branch;
import com.supermarket.data.DatabaseConnection;

import java.sql.*;
import java.util.ArrayList;
import java.util.List;

public class BranchDAO {
    public List<Branch> getAllBranches() {
        List<Branch> branches = new ArrayList<>();
        String query = "SELECT * FROM branches";

        try (Connection conn = DatabaseConnection.getConnection();
             PreparedStatement stmt = conn.prepareStatement(query);
             ResultSet rs = stmt.executeQuery()) {

            while (rs.next()) {
                System.out.println("Branch: " + rs.getString("name"));

                // Correctly construct the Branch object with the required arguments
                Branch branch = new Branch(
                        rs.getInt("id"),       // id
                        rs.getString("name"), // name
                        rs.getString("location") // location
                );
                System.out.println("Branches fetched: " + branches.size());
                branches.add(branch);
                System.out.println("Branches fetched: " + branches.size());
            }
        } catch (SQLException e) {
            System.err.println("Failed to fetch branches: " + e.getMessage());
        }

        return branches;
    }
}                                                   package com.supermarket.data.dao;

import com.supermarket.models.Customer;
import com.supermarket.data.DatabaseConnection;

import java.sql.*;
import java.util.ArrayList;
import java.util.List;

public class CustomerDAO {
    public void addCustomer(Customer customer) throws SQLException {
        String sql = "INSERT INTO customers (name, phone_number, loyalty_points) VALUES (?, ?, ?)";
        try (Connection conn = DatabaseConnection.getConnection();
             PreparedStatement stmt = conn.prepareStatement(sql, Statement.RETURN_GENERATED_KEYS)) {
            stmt.setString(1, customer.getName());
            stmt.setString(2, customer.getPhoneNumber());
            stmt.setInt(3, customer.getLoyaltyPoints());
            stmt.executeUpdate();

            // Retrieve the generated customer ID
            try (ResultSet rs = stmt.getGeneratedKeys()) {
                if (rs.next()) {
                    customer.setId(rs.getInt(1));
                }
            }
        }
    }

    public List<Customer> getAllCustomers() throws SQLException {
        List<Customer> customers = new ArrayList<>();
        String sql = "SELECT * FROM customers";
        try (Connection conn = DatabaseConnection.getConnection();
             Statement stmt = conn.createStatement();
             ResultSet rs = stmt.executeQuery(sql)) {
            while (rs.next()) {
                customers.add(new Customer(
                        rs.getInt("id"),
                        rs.getString("name"),
                        rs.getString("phone_number"),
                        rs.getInt("loyalty_points")
                ));
            }
        }
        return customers;
    }
}                                                   package com.supermarket.data.dao;

import com.supermarket.application.models.Product;
import com.supermarket.data.DatabaseConnection;

import java.sql.*;
import java.util.ArrayList;
import java.util.List;

public class ProductDAO {
    public void addProduct(Product product) throws SQLException {
        String sql = "INSERT INTO products (name, barcode, price, stock, branch_id) VALUES (?, ?, ?, ?, ?)";
        try (Connection conn = DatabaseConnection.getConnection();
             PreparedStatement stmt = conn.prepareStatement(sql)) {
            stmt.setString(1, product.getName());
            stmt.setString(2, product.getBarcode());
            stmt.setDouble(3, product.getPrice());
            stmt.setInt(4, product.getStock());
            stmt.setInt(5, product.getBranchId());
            stmt.executeUpdate();
        }
    }

    public List<Product> getAllProducts(int branchId) throws SQLException {
        List<Product> products = new ArrayList<>();
        String sql = "SELECT * FROM products WHERE branch_id = ?";
        try (Connection conn = DatabaseConnection.getConnection();
             PreparedStatement stmt = conn.prepareStatement(sql)) {
            stmt.setInt(1, branchId);
            try (ResultSet rs = stmt.executeQuery()) {
                while (rs.next()) {
                    products.add(new Product(
                            rs.getInt("id"),
                            rs.getString("name"),
                            rs.getString("barcode"),
                            rs.getDouble("price"),
                            rs.getInt("stock"),
                            rs.getInt("branch_id")
                    ));
                }
            }
        }
        return products;
    }

    public void updateProduct(Product product) throws SQLException {
        String sql = "UPDATE products SET name = ?, barcode = ?, price = ?, stock = ? WHERE id = ?";
        try (Connection conn = DatabaseConnection.getConnection();
             PreparedStatement stmt = conn.prepareStatement(sql)) {
            stmt.setString(1, product.getName());
            stmt.setString(2, product.getBarcode());
            stmt.setDouble(3, product.getPrice());
            stmt.setInt(4, product.getStock());
            stmt.setInt(5, product.getId());
            stmt.executeUpdate();
        }
    }

    public void deleteProduct(int id) throws SQLException {
        String sql = "DELETE FROM products WHERE id = ?";
        try (Connection conn = DatabaseConnection.getConnection();
             PreparedStatement stmt = conn.prepareStatement(sql)) {
            stmt.setInt(1, id);
            stmt.executeUpdate();
        }
    }
}                                                  package com.supermarket.data.dao;

import com.supermarket.application.models.Sale;
import com.supermarket.data.DatabaseConnection;

import java.sql.*;
import java.util.ArrayList;
import java.util.Date;
import java.util.List;

public class SalesDAO {
    public void addSale(Sale sale) throws SQLException {
        String sql = "INSERT INTO sales (sale_date, total_price, discount, branch_id) VALUES (?, ?, ?, ?)";
        try (Connection conn = DatabaseConnection.getConnection();
             PreparedStatement stmt = conn.prepareStatement(sql, Statement.RETURN_GENERATED_KEYS)) {
            java.sql.Date sqlDate = new java.sql.Date(sale.getSaleDate().getTime());
            stmt.setDate(1, sqlDate);
            stmt.setDouble(2, sale.getTotalPrice());
            stmt.setDouble(3, sale.getDiscount());
            stmt.setInt(4, sale.getBranchId());
            stmt.executeUpdate();

            // Retrieve the generated sale ID
            try (ResultSet rs = stmt.getGeneratedKeys()) {
                if (rs.next()) {
                    int saleId = rs.getInt(1);
                    sale.setId(saleId);

                    // Insert products related to the sale
                    insertSaleProducts(conn, saleId, sale.getProducts());
                }
            }
        }
    }

    private void insertSaleProducts(Connection conn, int saleId, List<com.supermarket.application.models.Product> products) throws SQLException {
        String sql = "INSERT INTO sale_products (sale_id, product_id, quantity) VALUES (?, ?, ?)";
        try (PreparedStatement stmt = conn.prepareStatement(sql)) {
            for (com.supermarket.application.models.Product product : products) {
                stmt.setInt(1, saleId);
                stmt.setInt(2, product.getId());
                stmt.setInt(3, 1); // Assuming quantity is 1 for simplicity
                stmt.executeUpdate();
            }
        }
    }

    public List<Sale> getSalesByBranch(int branchId) throws SQLException {
        List<Sale> sales = new ArrayList<>();
        String sql = "SELECT * FROM sales WHERE branch_id = ?";
        try (Connection conn = DatabaseConnection.getConnection();
             PreparedStatement stmt = conn.prepareStatement(sql)) {
            stmt.setInt(1, branchId);
            try (ResultSet rs = stmt.executeQuery()) {
                while (rs.next()) {
                    sales.add(new Sale(
                            rs.getInt("id"),
                            rs.getDate("sale_date"),
                            null, // Products are not fetched here
                            rs.getDouble("total_price"),
                            rs.getDouble("discount"),
                            rs.getInt("branch_id")
                    ));
                }
            }
        }
        return sales;
    }

    public List<Sale> getSalesByDate(Date date) throws SQLException {
        List<Sale> sales = new ArrayList<>();
        String sql = "SELECT * FROM sales WHERE sale_date = ?";
        try (Connection conn = DatabaseConnection.getConnection();
             PreparedStatement stmt = conn.prepareStatement(sql)) {
            java.sql.Date sqlDate = new java.sql.Date(date.getTime());
            stmt.setDate(1, sqlDate);

            try (ResultSet rs = stmt.executeQuery()) {
                while (rs.next()) {
                    Sale sale = new Sale(
                            rs.getInt("id"),
                            rs.getDate("sale_date"),
                            null, // Products are not fetched here
                            rs.getDouble("total_price"),
                            rs.getDouble("discount"),
                            rs.getInt("branch_id")
                    );
                    sales.add(sale);
                }
            }
        } catch (SQLException e) {
            System.err.println("Error fetching sales by date: " + e.getMessage());
            throw e;
        }
        return sales;
    }
}                                            package com.supermarket.data.dao;

import com.supermarket.application.models.User;
import com.supermarket.data.DatabaseConnection;
import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.util.ArrayList;
import java.util.List;

public class UserDAO {
    /**
     * Adds a new user to the database.
     *
     * @param user The user to add.
     * @throws SQLException If a database error occurs.
     */
    public void addUser(User user) throws SQLException {
        String sql = "INSERT INTO users (username, password, role, branch_id) VALUES (?, ?, ?, ?)";
        try (Connection conn = DatabaseConnection.getConnection();
             PreparedStatement stmt = conn.prepareStatement(sql)) {
            stmt.setString(1, user.getUsername());
            stmt.setString(2, user.getPassword()); // Password is already hashed
            stmt.setString(3, user.getRole());
            stmt.setInt(4, user.getBranchId());
            stmt.executeUpdate();
        }
    }

    /**
     * Fetches a user by username.
     *
     * @param username The username to search for.
     * @return The user object if found, null otherwise.
     * @throws SQLException If a database error occurs.
     */
    public User getUserByUsername(String username) throws SQLException {
        String sql = "SELECT * FROM users WHERE username = ?";
        try (Connection conn = DatabaseConnection.getConnection();
             PreparedStatement stmt = conn.prepareStatement(sql)) {
            stmt.setString(1, username);
            try (ResultSet rs = stmt.executeQuery()) {
                if (rs.next()) {
                    return new User(
                            rs.getInt("id"),
                            rs.getString("username"),
                            rs.getString("password"), // Password is stored as a hash
                            rs.getString("role"),
                            rs.getInt("branch_id")
                    );
                }
            }
        }
        return null;
    }

    /**
     * Updates an existing user in the database.
     *
     * @param user The user to update.
     * @throws SQLException If a database error occurs.
     */
    public List<User> getAllUsers() throws SQLException {
        List<User> users = new ArrayList<>();
        String sql = "SELECT * FROM users";
        try (Connection conn = DatabaseConnection.getConnection();
             PreparedStatement stmt = conn.prepareStatement(sql);
             ResultSet rs = stmt.executeQuery()) {
            while (rs.next()) {
                users.add(new User(
                        rs.getInt("id"),
                        rs.getString("username"),
                        rs.getString("password"),
                        rs.getString("role"),
                        rs.getInt("branch_id")
                ));
            }
        }
        return users;
    }

    public void updateUser(User user) throws SQLException {
        String sql = "UPDATE users SET username = ?, password = ?, role = ?, branch_id = ? WHERE id = ?";
        try (Connection conn = DatabaseConnection.getConnection();
             PreparedStatement stmt = conn.prepareStatement(sql)) {
            stmt.setString(1, user.getUsername());
            stmt.setString(2, user.getPassword());
            stmt.setString(3, user.getRole());
            stmt.setInt(4, user.getBranchId());
            stmt.setInt(5, user.getId());
            stmt.executeUpdate();
        }
    }

    /**
     * Deletes a user from the database.
     *
     * @param id The ID of the user to delete.
     * @throws SQLException If a database error occurs.
     */
    public void deleteUser(int id) throws SQLException {
        String sql = "DELETE FROM users WHERE id = ?";
        try (Connection conn = DatabaseConnection.getConnection();
             PreparedStatement stmt = conn.prepareStatement(sql)) {
            stmt.setInt(1, id);
            stmt.executeUpdate();
        }
    }
}                                               package com.supermarket.data;

import com.zaxxer.hikari.HikariConfig;
import com.zaxxer.hikari.HikariDataSource;
import java.io.File;
import java.io.InputStream;
import java.nio.file.Files;
import java.sql.Connection;
import java.sql.SQLException;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

public class DatabaseConnection {
    private static final Logger logger = LoggerFactory.getLogger(DatabaseConnection.class);
    private static final String DATABASE_NAME = "supermarket.db";
    private static HikariDataSource dataSource;

    static {
        HikariConfig config = new HikariConfig();
        config.setJdbcUrl(getDatabaseURL());
        config.setMaximumPoolSize(10);
        config.setIdleTimeout(30000);
        config.setMaxLifetime(1800000);
        config.setConnectionTimeout(10000);
        config.setAutoCommit(true);
        dataSource = new HikariDataSource(config);
    }

    public static Connection getConnection() throws SQLException {
        return dataSource.getConnection();
    }

    private static String getDatabaseURL() {
        // Absolute path for development (adjust based on your system)
        String dbPath = "C:\\Users\\dawit\\Desktop\\supermarket-system\\src\\main\\resources\\supermarket.db";

        // Check if the file exists
        File dbFile = new File(dbPath);
        if (!dbFile.exists()) {
            logger.error("Database file not found at: {}", dbPath);
            throw new RuntimeException("Database file not found at: " + dbPath);
        }

        // Return the JDBC URL for SQLite
        return "jdbc:sqlite:" + dbPath;
    }

    public static void closeDataSource() {
        if (dataSource != null) {
            dataSource.close();
            logger.info("Database connection pool closed.");
        }
    }
}                                      package com.supermarket.data;

import com.supermarket.application.models.User;
import com.supermarket.application.services.UserService;
import com.supermarket.utils.PasswordUtil;

import java.sql.SQLException;
import java.util.List;

public class PasswordUpdater {
    public static void main(String[] args) {
        UserService userService = new UserService();
        try {
            List<User> users = userService.getAllUsers(); // Fetch all users
            for (User user : users) {
                String storedPassword = user.getPassword();
                if (!storedPassword.startsWith("$2")) { // Check if the password is already hashed
                    String hashedPassword = PasswordUtil.hashPassword(storedPassword); // Hash the password
                    user.setPassword(hashedPassword); // Update the user object with the hashed password
                    userService.updateUser(user); // Save the updated user back to the database
                    System.out.println("Updated password for user: " + user.getUsername());
                } else {
                    System.out.println("Password already hashed for user: " + user.getUsername());
                }
            }
        } catch (SQLException e) {
            System.err.println("Failed to update passwords: " + e.getMessage());
        }
    }
}                                           package com.supermarket.presentation.controllers;

import com.supermarket.presentation.App;
import javafx.fxml.FXML;

public class BranchController {
    private App app;

    public void setApp(App app) {
        this.app = app; // Store the App instance
    }

    // Add any navigation logic here if needed
    @FXML
    private void navigateBack() {
        if (app != null) {
            app.showDashboard(); // Example: Navigate back to the dashboard
        } else {
            System.err.println("App reference is null. Navigation failed.");
        }
    }
}                              package com.supermarket.presentation.controllers;

import com.supermarket.presentation.App;
import com.supermarket.utils.LocalizationUtil;
import javafx.fxml.FXML;
import javafx.scene.control.Alert;
import javafx.scene.control.Button;
import javafx.scene.control.Label;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

public class CashierMenuController {
    private static final Logger logger = LoggerFactory.getLogger(CashierMenuController.class);

    private App app; // Reference to the main application

    @FXML
    private Label welcomeLabel; // Welcome message label

    @FXML
    private Button salesButton; // Sales Management button

    @FXML
    private Button inventoryButton; // Product Management button

    @FXML
    private Button logoutButton; // Logout button

    @FXML
    private Button toggleLanguageButton; // Toggle Language button

    public void setApp(App app) {
        this.app = app; // Store the App instance
        initializeUI(); // Initialize UI components with localized strings
        logger.info("App instance set successfully in CashierMenuController.");
    }

    @FXML
    private void showSalesManagement() {
        if (app != null) {
            app.showSalesManagement(); // Navigate to the Sales Management screen
        } else {
            logger.error("App reference is null. Navigation failed.");
            showError("Navigation failed. Please contact the administrator.");
        }
    }

    @FXML
    private void showProductManagement() {
        if (app != null) {
            app.showProductManagement(); // Navigate to the Product Management screen
        } else {
            logger.error("App reference is null. Navigation failed.");
            showError("Navigation failed. Please contact the administrator.");
        }
    }

    @FXML
    private void logout() {
        if (app != null) {
            app.showLoginScreen(); // Navigate back to the login screen
        } else {
            logger.error("App reference is null. Logout failed.");
            showError("Logout failed. Please contact the administrator.");
        }
    }

    @FXML
    private void toggleLanguage() {
        try {
            String currentLanguage = LocalizationUtil.getCurrentLanguage();
            if ("en".equalsIgnoreCase(currentLanguage)) {
                LocalizationUtil.setLanguage("am"); // Switch to Amharic
            } else {
                LocalizationUtil.setLanguage("en"); // Switch to English
            }
            reloadUIWithNewLanguage();
            showSuccess(LocalizationUtil.getLocalizedString("language_toggled_successfully"));
        } catch (Exception e) {
            showError("Failed to toggle language: " + e.getMessage());
        }
    }

    /**
     * Initializes the UI components with localized strings.
     */
    private void initializeUI() {
        if (welcomeLabel != null) {
            welcomeLabel.setText(LocalizationUtil.getLocalizedString("welcome_cashier")); // Set welcome message
            welcomeLabel.getStyleClass().add("label"); // Add CSS class
        }

        if (salesButton != null) {
            salesButton.setText(LocalizationUtil.getLocalizedString("sales_management")); // Set button text
            salesButton.getStyleClass().add("button primary-button"); // Add CSS class
        }

        if (inventoryButton != null) {
            inventoryButton.setText(LocalizationUtil.getLocalizedString("product_management")); // Set button text
            inventoryButton.getStyleClass().add("button secondary-button"); // Add CSS class
        }

        if (logoutButton != null) {
            logoutButton.setText(LocalizationUtil.getLocalizedString("logout")); // Set button text
            logoutButton.getStyleClass().add("button danger-button"); // Add CSS class
        }

        if (toggleLanguageButton != null) {
            toggleLanguageButton.setText(LocalizationUtil.getLocalizedString("toggle_language")); // Set button text
            toggleLanguageButton.getStyleClass().add("toggle-language-button"); // Add CSS class
        }
    }

    /**
     * Reloads the UI components with the updated language.
     */
    private void reloadUIWithNewLanguage() {
        if (welcomeLabel != null) {
            welcomeLabel.setText(LocalizationUtil.getLocalizedString("welcome_cashier"));
        }

        if (salesButton != null) {
            salesButton.setText(LocalizationUtil.getLocalizedString("sales_management"));
        }

        if (inventoryButton != null) {
            inventoryButton.setText(LocalizationUtil.getLocalizedString("product_management"));
        }

        if (logoutButton != null) {
            logoutButton.setText(LocalizationUtil.getLocalizedString("logout"));
        }

        if (toggleLanguageButton != null) {
            toggleLanguageButton.setText(LocalizationUtil.getLocalizedString("toggle_language"));
        }
    }

    private void showError(String message) {
        Alert alert = new Alert(Alert.AlertType.ERROR);
        alert.setTitle(LocalizationUtil.getLocalizedString("error"));
        alert.setHeaderText(null);
        alert.setContentText(message);
        alert.showAndWait();
    }

    private void showSuccess(String message) {
        Alert alert = new Alert(Alert.AlertType.INFORMATION);
        alert.setTitle(LocalizationUtil.getLocalizedString("success"));
        alert.setHeaderText(null);
        alert.setContentText(message);
        alert.showAndWait();
    }
}                                                 package com.supermarket.presentation.controllers;

import com.supermarket.presentation.App;
import javafx.fxml.FXML;

public class CustomerController {
    private App app;

    public void setApp(App app) {
        this.app = app; // Store the App instance
    }

    // Add any navigation logic here if needed
    @FXML
    private void navigateBack() {
        if (app != null) {
            app.showDashboard(); // Example: Navigate back to the dashboard
        } else {
            System.err.println("App reference is null. Navigation failed.");
        }
    }
}                                                    package com.supermarket.presentation.controllers;

import com.supermarket.presentation.App;
import com.supermarket.utils.LocalizationUtil;
import javafx.fxml.FXML;
import javafx.scene.control.Alert;
import javafx.scene.control.Button;
import javafx.scene.control.Label;

public class DashboardController {
    private App app;

    // Injected UI components
    @FXML
    private Label titleLabel;
    @FXML
    private Label welcomeLabel;
    @FXML
    private Button logoutButton;
    @FXML
    private Button userManagementButton;
    @FXML
    private Button branchManagementButton;
    @FXML
    private Button customerManagementButton;
    @FXML
    private Button salesManagementButton;
    @FXML
    private Button productManagementButton;
    @FXML
    private Button reportsButton;

    public void setApp(App app) {
        this.app = app;
        reloadUIWithNewLanguage(); // Reload UI components with the current language
    }

    @FXML
    private void showUserManagement() {
        if (app != null) {
            app.showUserManagement();
        } else {
            showError("App reference is null. Navigation failed.");
        }
    }

    @FXML
    private void showBranchManagement() {
        if (app != null) {
            app.showBranchManagement();
        } else {
            showError("App reference is null. Navigation failed.");
        }
    }

    @FXML
    private void showCustomerManagement() {
        if (app != null) {
            app.showCustomerManagement();
        } else {
            showError("App reference is null. Navigation failed.");
        }
    }

    @FXML
    private void showSalesManagement() {
        if (app != null) {
            app.showSalesManagement();
        } else {
            showError("App reference is null. Navigation failed.");
        }
    }

    @FXML
    private void showProductManagement() {
        if (app != null) {
            app.showProductManagement();
        } else {
            showError("App reference is null. Navigation failed.");
        }
    }

    @FXML
    private void showReports() {
        if (app != null) {
            app.showReports();
        } else {
            showError("App reference is null. Navigation failed.");
        }
    }

    @FXML
    private void logout() {
        if (app != null) {
            app.showLoginScreen(); // Navigate back to the login screen
        } else {
            showError("App reference is null. Logout failed.");
        }
    }

    /**
     * Reloads the UI components with the updated language.
     */
    private void reloadUIWithNewLanguage() {
        if (titleLabel != null) {
            titleLabel.setText(LocalizationUtil.getLocalizedString("title_dashboard"));
        }

        if (welcomeLabel != null) {
            welcomeLabel.setText(LocalizationUtil.getLocalizedString("welcome_admin"));
        }

        if (logoutButton != null) {
            logoutButton.setText(LocalizationUtil.getLocalizedString("logout"));
        }

        if (userManagementButton != null) {
            userManagementButton.setText(LocalizationUtil.getLocalizedString("user_management"));
        }

        if (branchManagementButton != null) {
            branchManagementButton.setText(LocalizationUtil.getLocalizedString("branch_management"));
        }

        if (customerManagementButton != null) {
            customerManagementButton.setText(LocalizationUtil.getLocalizedString("customer_management"));
        }

        if (salesManagementButton != null) {
            salesManagementButton.setText(LocalizationUtil.getLocalizedString("sales_management"));
        }

        if (productManagementButton != null) {
            productManagementButton.setText(LocalizationUtil.getLocalizedString("product_management"));
        }

        if (reportsButton != null) {
            reportsButton.setText(LocalizationUtil.getLocalizedString("reports"));
        }
    }

    /**
     * Displays an error message to the user.
     *
     * @param message The error message to display.
     */
    private void showError(String message) {
        Alert alert = new Alert(Alert.AlertType.ERROR);
        alert.setTitle(LocalizationUtil.getLocalizedString("error"));
        alert.setHeaderText(null);
        alert.setContentText(message);
        alert.showAndWait();
    }
}                                        package com.supermarket.presentation.controllers;

import com.supermarket.application.models.Branch;
import com.supermarket.application.services.BranchService;
import com.supermarket.application.services.ProductService;
import com.supermarket.application.models.Product;
import com.supermarket.presentation.App;
import javafx.collections.FXCollections;
import javafx.collections.ObservableList;
import javafx.fxml.FXML;
import javafx.scene.control.*;
import javafx.scene.control.cell.PropertyValueFactory;
import javafx.scene.control.TableCell;
import javafx.scene.control.TableColumn;
import javafx.scene.control.cell.PropertyValueFactory;
import javafx.scene.layout.HBox;
import javafx.util.Callback;

import java.sql.SQLException;
import java.util.List;

public class InventoryController {
    @FXML
    private ComboBox<Branch> branchComboBox; // Ensure this matches the fx:id in FXML
    @FXML
    private TableView<Product> productTable;
    @FXML
    private TableColumn<Product, Integer> idColumn;
    @FXML
    private TableColumn<Product, String> nameColumn;
    @FXML
    private TableColumn<Product, String> barcodeColumn;
    @FXML
    private TableColumn<Product, Double> priceColumn;
    @FXML
    private TableColumn<Product, Integer> stockColumn;
    @FXML
    private TextField nameField;
    @FXML
    private TextField barcodeField;
    @FXML
    private TextField priceField;
    @FXML
    private TextField stockField;
    private App app;

    private BranchService branchService = new BranchService();
    private final ProductService productService = new ProductService();
    private final ObservableList<Product> products = FXCollections.observableArrayList();



    @FXML
    public void initialize() {
        System.out.println("Initializing InventoryController...");

        // Set up table columns
        idColumn.setCellValueFactory(new PropertyValueFactory<>("id"));
        nameColumn.setCellValueFactory(new PropertyValueFactory<>("name"));
        barcodeColumn.setCellValueFactory(new PropertyValueFactory<>("barcode"));
        priceColumn.setCellValueFactory(new PropertyValueFactory<>("price"));
        stockColumn.setCellValueFactory(new PropertyValueFactory<>("stock"));



        // Add Actions column with Update and Delete buttons
        TableColumn<Product, Void> actionsColumn = new TableColumn<>("Actions");
        actionsColumn.setPrefWidth(150);
        actionsColumn.setCellFactory(new Callback<TableColumn<Product, Void>, TableCell<Product, Void>>() {
            @Override
            public TableCell<Product, Void> call(TableColumn<Product, Void> param) {
                return new TableCell<Product, Void>() {
                    private final Button updateButton = new Button("Update");
                    private final Button deleteButton = new Button("Delete");

                    {
                        // Update button action
                        updateButton.setOnAction(event -> {
                            Product product = getTableView().getItems().get(getIndex());
                            updateProduct(product);
                        });

                        // Delete button action
                        deleteButton.setOnAction(event -> {
                            Product product = getTableView().getItems().get(getIndex());
                            deleteProduct(product);
                        });
                    }

                    @Override
                    protected void updateItem(Void item, boolean empty) {
                        super.updateItem(item, empty);
                        if (empty) {
                            setGraphic(null);
                        } else {
                            HBox buttons = new HBox(5, updateButton, deleteButton);
                            setGraphic(buttons);
                        }
                    }
                };
            }
        });

        // Add the Actions column to the table
        productTable.getColumns().add(actionsColumn);

        // Add listener for product selection
        productTable.getSelectionModel().selectedItemProperty().addListener((observable, oldValue, newValue) -> {
            if (newValue != null) {
                // Populate input fields with selected product's data
                nameField.setText(newValue.getName());
                barcodeField.setText(newValue.getBarcode());
                priceField.setText(String.valueOf(newValue.getPrice()));
                stockField.setText(String.valueOf(newValue.getStock()));
            }
        });

        try {
            // Load branches into the ComboBox
            List<Branch> branches = branchService.getAllBranches();
            branchComboBox.setItems(FXCollections.observableArrayList(branches));
            System.out.println("Branches loaded: " + branches.size());

            // Add listener for branch selection
            branchComboBox.getSelectionModel().selectedItemProperty().addListener((observable, oldValue, newValue) -> {
                if (newValue != null) {
                    System.out.println("Selected branch: " + newValue.getName());
                    loadProducts(newValue.getId());
                }
            });
        } catch (SQLException e) {
            showError("Failed to load branches: " + e.getMessage());
        }
    }

    public void setApp(App app) {
        this.app = app;
    }

    private void loadProducts(int branchId) {
        try {
            products.clear();
            List<Product> productList = productService.getAllProducts(branchId);
            products.addAll(productList);
            productTable.setItems(products);
            System.out.println("Products loaded: " + productList.size());
        } catch (SQLException e) {
            showError("Failed to load products: " + e.getMessage());
        }
    }

    @FXML
    private void addProduct() {
        try {
            String name = nameField.getText();
            String barcode = barcodeField.getText();
            double price = Double.parseDouble(priceField.getText());
            int stock = Integer.parseInt(stockField.getText());
            int branchId = branchComboBox.getValue().getId();

            Product product = new Product(name, barcode, price, stock, branchId);
            productService.addProduct(product);
            loadProducts(branchId);

            // Clear input fields
            nameField.clear();
            barcodeField.clear();
            priceField.clear();
            stockField.clear();
        } catch (NumberFormatException e) {
            showError("Invalid input. Please check the price and stock fields.");
        } catch (SQLException e) {
            showError("Failed to add product: " + e.getMessage());
        } catch (NullPointerException e) {
            showError("Please select a branch before adding a product.");
        }
    }
    @FXML
    private void updateProduct(Product product) {
        try {
            // Get updated values from input fields
            String name = nameField.getText();
            String barcode = barcodeField.getText();
            double price = Double.parseDouble(priceField.getText());
            int stock = Integer.parseInt(stockField.getText());

            // Update the selected product
            product.setName(name);
            product.setBarcode(barcode);
            product.setPrice(price);
            product.setStock(stock);

            // Save changes to the database
            productService.updateProduct(product);

            // Refresh the table
            loadProducts(product.getBranchId());

            // Clear input fields
            nameField.clear();
            barcodeField.clear();
            priceField.clear();
            stockField.clear();
        } catch (NumberFormatException e) {
            showError("Invalid input. Please check the price and stock fields.");
        } catch (SQLException e) {
            showError("Failed to update product: " + e.getMessage());
        }
    }

    @FXML
    private void deleteProduct(Product product) {
        try {
            // Delete the selected product from the database
            productService.deleteProduct(product.getId());

            // Refresh the table
            loadProducts(product.getBranchId());

            // Clear input fields
            nameField.clear();
            barcodeField.clear();
            priceField.clear();
            stockField.clear();
        } catch (SQLException e) {
            showError("Failed to delete product: " + e.getMessage());
        }
    }

    private void showError(String message) {
        Alert alert = new Alert(Alert.AlertType.ERROR);
        alert.setTitle("Error");
        alert.setHeaderText(null);
        alert.setContentText(message);
        alert.showAndWait();
    }
}                                                                                       package com.supermarket.presentation.controllers;

import com.supermarket.application.models.Branch;
import com.supermarket.application.models.User;
import com.supermarket.application.services.BranchService;
import com.supermarket.application.services.UserService;
import com.supermarket.presentation.App;
import javafx.collections.FXCollections;
import javafx.fxml.FXML;
import javafx.fxml.FXMLLoader;
import javafx.scene.Parent;
import javafx.scene.Scene;
import javafx.scene.control.*;
import javafx.stage.Stage;
import java.io.IOException;
import java.sql.SQLException;
import java.util.List;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

public class LoginController {
    private static final Logger logger = LoggerFactory.getLogger(LoginController.class);

    @FXML
    private TextField usernameField;
    @FXML
    private PasswordField passwordField;
    @FXML
    private ComboBox<Branch> branchComboBox;

    private App app; // Reference to the main application
    private Stage primaryStage; // Reference to the main stage

    private final UserService userService = new UserService();
    private final BranchService branchService = new BranchService();

    /**
     * Initializes the controller by loading branches into the ComboBox.
     */
    @FXML
    public void initialize() {
        try {
            List<Branch> branches = branchService.getAllBranches();
            if (branches.isEmpty()) {
                showError("No branches are configured in the system. Please contact the administrator.");
                return;
            }
            branchComboBox.setItems(FXCollections.observableArrayList(branches));
            logger.info("Branches loaded successfully: {}", branches.size());
        } catch (SQLException e) {
            showError("Failed to load branches: " + e.getMessage());
            logger.error("Error loading branches: {}", e.getMessage(), e);
        }
    }

    /**
     * Handles the login process.
     */
    @FXML
    private void handleLogin() {
        String username = usernameField.getText();
        String password = passwordField.getText();
        Branch selectedBranch = branchComboBox.getValue();

        if (selectedBranch == null) {
            showError("Please select a branch.");
            return;
        }

        try {
            User user = userService.getUserByUsername(username);
            if (user != null && user.getBranchId() == selectedBranch.getId()) {
                if (userService.authenticate(username, password)) {
                    showSuccess("Login successful!");
                    navigateToDashboard(user.getRole());
                } else {
                    showError("Invalid username or password.");
                }
            } else {
                showError("Invalid username or password.");
            }
        } catch (SQLException e) {
            showError("Failed to authenticate: " + e.getMessage());
            logger.error("Authentication failed: {}", e.getMessage(), e);
        }
    }

    /**
     * Displays a success message to the user.
     *
     * @param message The success message to display.
     */
    private void showSuccess(String message) {
        Alert alert = new Alert(Alert.AlertType.INFORMATION);
        alert.setTitle("Success");
        alert.setHeaderText(null);
        alert.setContentText(message);
        alert.showAndWait(); // Show the alert and wait for user interaction
        logger.info("Displayed success message: {}", message); // Log the success message
    }

    /**
     * Navigates the user to the appropriate dashboard based on their role.
     *
     * @param role The role of the user (e.g., "admin", "cashier").
     */
    private void navigateToDashboard(String role) {
        if (primaryStage == null || app == null) {
            showError("Failed to initialize application components.");
            return;
        }

        try {
            if ("admin".equalsIgnoreCase(role)) {
                FXMLLoader loader = new FXMLLoader(getClass().getResource("/fxml/dashboard.fxml"));
                Parent root = loader.load();
                DashboardController controller = loader.getController();
                controller.setApp(app); // Pass the App instance
                primaryStage.setTitle("Supermarket Management System - Admin Dashboard");
                primaryStage.setScene(new Scene(root, 800, 600));
            } else if ("cashier".equalsIgnoreCase(role)) {
                FXMLLoader loader = new FXMLLoader(getClass().getResource("/fxml/cashier_menu.fxml"));
                Parent root = loader.load();
                CashierMenuController controller = loader.getController();
                controller.setApp(app); // Pass the App instance
                primaryStage.setTitle("Supermarket Management System - Cashier Menu");
                primaryStage.setScene(new Scene(root, 600, 400));
            } else {
                showError("Unknown user role: " + role);
                return;
            }
            primaryStage.show();
        } catch (IOException e) {
            showError("Failed to load dashboard: " + e.getMessage());
        }
    }

    /**
     * Displays an error message to the user.
     *
     * @param message The error message to display.
     */
    private void showError(String message) {
        Alert alert = new Alert(Alert.AlertType.ERROR);
        alert.setTitle("Error");
        alert.setHeaderText(null);
        alert.setContentText(message);
        alert.showAndWait();
    }

    /**
     * Sets the primary stage reference for navigation purposes.
     *
     * @param primaryStage The main stage of the application.
     */
    public void setPrimaryStage(Stage primaryStage) {
        if (primaryStage == null) {
            logger.error("Primary stage is null. Navigation will fail.");
        } else {
            this.primaryStage = primaryStage;
            logger.info("Primary stage set successfully.");
        }
    }

    public void setApp(App app) {
        this.app=app;
    }
    }

/**
 * Sets the App reference for navigation purposes.
 *
 * @param app The main application instance.
 */                                                 package com.supermarket.presentation.controllers;

import com.supermarket.presentation.App;
import javafx.fxml.FXML;
import javafx.scene.control.Button;

public class NavigationBarController {
    private App app;

    public void setApp(App app) {
        this.app = app;
    }

    @FXML
    private void showSalesManagement() {
        if (app != null) {
            app.showSalesManagement();
        } else {
            System.err.println("App reference is null. Navigation failed.");
        }
    }

    @FXML
    private void showProductManagement() {
        if (app != null) {
            app.showProductManagement();
        } else {
            System.err.println("App reference is null. Navigation failed.");
        }
    }

    @FXML
    private void showCustomerManagement() {
        if (app != null) {
            app.showCustomerManagement();
        } else {
            System.err.println("App reference is null. Navigation failed.");
        }
    }

    @FXML
    private void showBranchManagement() {
        if (app != null) {
            app.showBranchManagement();
        } else {
            System.err.println("App reference is null. Navigation failed.");
        }
    }
}                                                      package com.supermarket.presentation.controllers;

import com.supermarket.application.models.Branch;
import com.supermarket.application.services.BranchService;
import com.supermarket.application.services.ProductService;
import com.supermarket.application.services.SalesService;
import com.supermarket.application.models.Product;
import com.supermarket.application.models.Sale;
import com.supermarket.presentation.App;
import javafx.collections.FXCollections;
import javafx.collections.ObservableList;
import javafx.fxml.FXML;
import javafx.scene.control.*;
import javafx.scene.control.cell.PropertyValueFactory;

import java.sql.SQLException;
import java.util.Date;
import java.util.List;

public class SalesController {
    @FXML
    private ComboBox<Branch> branchComboBox;
    @FXML
    private TableView<Product> productTable;
    @FXML
    private TableColumn<Product, String> nameColumn;
    @FXML
    private TableColumn<Product, Double> priceColumn;
    @FXML
    private TableColumn<Product, Integer> stockColumn;
    @FXML
    private TextField quantityField;
    @FXML
    private TextField discountField;
    @FXML
    private TextField totalPriceField;

    private final BranchService branchService = new BranchService();
    private final ProductService productService = new ProductService();
    private final SalesService salesService = new SalesService();
    private final ObservableList<Product> products = FXCollections.observableArrayList();
    private final ObservableList<Product> cart = FXCollections.observableArrayList();
    private App app;

    @FXML
    public void initialize() {
        branchComboBox.getItems().add(new Branch(1, "Main Branch", "Location 1"));

        nameColumn.setCellValueFactory(new PropertyValueFactory<>("name"));
        priceColumn.setCellValueFactory(new PropertyValueFactory<>("price"));
        stockColumn.setCellValueFactory(new PropertyValueFactory<>("stock"));

        try {
            List<Branch> branches = branchService.getAllBranches();
            branchComboBox.setItems(FXCollections.observableArrayList(branches));
            System.out.println("Branches to be set in ComboBox: " + branches.size());


            branchComboBox.getSelectionModel().selectedItemProperty().addListener((observable, oldValue, newValue) -> {
                if (newValue != null) {
                    loadProducts(newValue.getId());
                }
            });
        } catch (SQLException e) {
            showError("Failed to load branches: " + e.getMessage());
        }
    }

    private void loadProducts(int branchId) {
        try {
            products.clear();
            products.addAll(productService.getAllProducts(branchId));
            productTable.setItems(products);
        } catch (SQLException e) {
            showError("Failed to load products: " + e.getMessage());
        }
    }

    public void setApp(App app) {
        this.app = app;
    }

    @FXML
    private void addToCart() {
        Product selectedProduct = productTable.getSelectionModel().getSelectedItem();
        if (selectedProduct != null) {
            int quantity = 1;
            try {
                quantity = Integer.parseInt(quantityField.getText());
                if (quantity <= 0) {
                    showError("Quantity must be a positive number.");
                    return;
                }
            } catch (NumberFormatException e) {
                quantity = 1;
            }

            cart.add(selectedProduct);
            updateTotalPrice();
        } else {
            showError("Please select a product to add to the cart.");
        }
    }

    private void updateTotalPrice() {
        double total = cart.stream().mapToDouble(Product::getPrice).sum();
        double discount = 0;
        try {
            discount = Double.parseDouble(discountField.getText());
            if (discount < 0 || discount > 100) {
                showError("Discount must be between 0 and 100.");
                return;
            }
        } catch (NumberFormatException e) {
            discount = 0;
        }

        double discountedTotal = total - (total * discount / 100);
        totalPriceField.setText(String.valueOf(discountedTotal));
    }

    @FXML
    private void processSale() {
        if (cart.isEmpty()) {
            showError("The cart is empty. Please add products before processing the sale.");
            return;
        }

        try {
            int branchId = branchComboBox.getValue().getId();
            double totalPrice = Double.parseDouble(totalPriceField.getText());
            double discount = Double.parseDouble(discountField.getText());

            Sale sale = new Sale(0, new Date(), cart, totalPrice, discount, branchId);
            salesService.addSale(sale);

            cart.clear();
            updateTotalPrice();
            showSuccess("Sale processed successfully!");
        } catch (SQLException e) {
            showError("Failed to process sale: " + e.getMessage());
        }
    }

    private void showError(String message) {
        Alert alert = new Alert(Alert.AlertType.ERROR);
        alert.setTitle("Error");
        alert.setHeaderText(null);
        alert.setContentText(message);
        alert.showAndWait();
    }

    private void showSuccess(String message) {
        Alert alert = new Alert(Alert.AlertType.INFORMATION);
        alert.setTitle("Success");
        alert.setHeaderText(null);
        alert.setContentText(message);
        alert.showAndWait();
    }
}                                             package com.supermarket.presentation.controllers;

import com.supermarket.application.models.Branch;
import com.supermarket.application.models.User;
import com.supermarket.application.services.BranchService;
import com.supermarket.application.services.UserService;
import com.supermarket.presentation.App;
import javafx.collections.FXCollections;
import javafx.collections.ObservableList;
import javafx.fxml.FXML;
import javafx.scene.control.*;
import java.sql.SQLException;
import java.util.List;

public class UserController {
    @FXML
    private TextField usernameField;
    @FXML
    private PasswordField passwordField;
    @FXML
    private ComboBox<String> roleComboBox;
    @FXML
    private ComboBox<Branch> branchComboBox; // Ensure this matches the type Branch

    private final UserService userService = new UserService();
    private final BranchService branchService = new BranchService();

    public void setApp(App app) {
        // You can use the App instance if needed for navigation or other purposes
    }

    /**
     * Initializes the controller by loading branches into the ComboBox.
     */
    @FXML
    public void initialize() {
        try {
            // Fetch branches from the service layer
            List<Branch> branches = branchService.getAllBranches();

            // Convert List<Branch> to ObservableList<Branch>
            ObservableList<Branch> observableBranches = FXCollections.observableArrayList(branches);

            // Set the ObservableList to the ComboBox
            branchComboBox.setItems(observableBranches);
        } catch (SQLException e) {
            showError("Failed to load branches: " + e.getMessage());
        }
    }

    /**
     * Adds a new user with a plain-text password.
     */
    @FXML
    private void addUser() {
        String username = usernameField.getText();
        String password = passwordField.getText();
        String role = roleComboBox.getValue();
        Branch selectedBranch = branchComboBox.getValue();

        if (username.isEmpty() || password.isEmpty() || role == null || selectedBranch == null) {
            showError("Please fill in all fields.");
            return;
        }

        try {
            // Create a new User object and pass it to the service layer
            userService.addUser(new User(username, password, role, selectedBranch.getId()));
            showSuccess("User added successfully!");
            clearFields();
        } catch (SQLException e) {
            showError("Failed to add user: " + e.getMessage());
        }
    }

    /**
     * Updates an existing user with a plain-text password.
     */
    @FXML
    private void updateUser() {
        String username = usernameField.getText();
        String password = passwordField.getText();
        String role = roleComboBox.getValue();
        Branch selectedBranch = branchComboBox.getValue();

        if (username.isEmpty() || password.isEmpty() || role == null || selectedBranch == null) {
            showError("Please fill in all fields.");
            return;
        }

        try {
            // Update the user's details and pass it to the service layer
            userService.updateUser(new User(0, username, password, role, selectedBranch.getId()));
            showSuccess("User updated successfully!");
            clearFields();
        } catch (SQLException e) {
            showError("Failed to update user: " + e.getMessage());
        }
    }

    /**
     * Displays an error message to the user.
     *
     * @param message The error message to display.
     */
    private void showError(String message) {
        Alert alert = new Alert(Alert.AlertType.ERROR);
        alert.setTitle("Error");
        alert.setHeaderText(null);
        alert.setContentText(message);
        alert.showAndWait();
    }

    /**
     * Displays a success message to the user.
     *
     * @param message The success message to display.
     */
    private void showSuccess(String message) {
        Alert alert = new Alert(Alert.AlertType.INFORMATION);
        alert.setTitle("Success");
        alert.setHeaderText(null);
        alert.setContentText(message);
        alert.showAndWait();
    }

    /**
     * Clears all input fields.
     */
    private void clearFields() {
        usernameField.clear();
        passwordField.clear();
        roleComboBox.setValue(null);
        branchComboBox.setValue(null);
    }
}                                          package com.supermarket.presentation;

import com.supermarket.application.services.BranchService;
import com.supermarket.presentation.controllers.*;
import javafx.application.Application;
import javafx.fxml.FXMLLoader;
import javafx.scene.Parent;
import javafx.scene.Scene;
import javafx.stage.Stage;
import java.io.IOException;

public class App extends Application {
    private Stage primaryStage;
    private BranchService branchService;

    @Override
    public void start(Stage primaryStage) throws Exception {
        this.primaryStage = primaryStage;
        primaryStage.setTitle("Supermarket Management System");
        showLoginScreen();
    }

    /**
     * Static method to launch the JavaFX application.
     *
     * @param args Command-line arguments.
     */
    public static void launchApp(String[] args) {
        launch(args); // Starts the JavaFX application
    }

    /**
     * Displays the login screen.
     */
    public void showLoginScreen() {
        try {
            FXMLLoader loader = new FXMLLoader(getClass().getResource("/fxml/login.fxml"));
            Parent root = loader.load();
            LoginController controller = loader.getController(); // Get the controller instance
            controller.setPrimaryStage(primaryStage); // Pass the primaryStage reference
            controller.setApp(this); // Pass the App instance
            Scene scene = new Scene(root, 400, 300);
            scene.getStylesheets().add(getClass().getResource("/styles/styles.css").toExternalForm()); // Load styles.css
            primaryStage.setScene(scene);
            primaryStage.show();
        } catch (Exception e) {
            e.printStackTrace();
        }
    }

    /**
     * Loads the Admin Dashboard screen.
     */
    public void showAdminDashboard() {
        try {
            FXMLLoader loader = new FXMLLoader(getClass().getResource("/fxml/dashboard.fxml"));
            Parent root = loader.load();
            DashboardController controller = loader.getController(); // Correctly cast to DashboardController
            controller.setApp(this); // Pass the App instance
            Scene scene = new Scene(root, 800, 600);
            scene.getStylesheets().add(getClass().getResource("/styles/styles.css").toExternalForm()); // Load styles.css
            primaryStage.setScene(scene);
            primaryStage.setTitle("Supermarket Management System - Admin Dashboard");
        } catch (IOException e) {
            e.printStackTrace();
        }
    }

    /**
     * Loads the Cashier Menu screen.
     */
    public void showCashierMenu() {
        try {
            FXMLLoader loader = new FXMLLoader(getClass().getResource("/fxml/cashier_menu.fxml"));
            Parent root = loader.load();
            CashierMenuController controller = loader.getController(); // Correctly cast to CashierMenuController
            controller.setApp(this); // Pass the App instance
            Scene scene = new Scene(root, 600, 400);
            scene.getStylesheets().add(getClass().getResource("/styles/styles.css").toExternalForm()); // Load styles.css
            primaryStage.setScene(scene);
            primaryStage.setTitle("Supermarket Management System - Cashier Menu");
        } catch (IOException e) {
            e.printStackTrace();
        }
    }

    /**
     * Loads the Product Management screen.
     */
    public void showProductManagement() {
        try {
            FXMLLoader loader = new FXMLLoader(getClass().getResource("/fxml/inventory.fxml"));
            Parent root = loader.load();
            InventoryController controller = loader.getController(); // Correctly cast to InventoryController
            controller.setApp(this); // Pass the App instance
            Scene scene = new Scene(root, 800, 600);
            scene.getStylesheets().add(getClass().getResource("/styles/styles.css").toExternalForm()); // Load styles.css
            primaryStage.setScene(scene);
            primaryStage.setTitle("Supermarket Management System - Product Management");
        } catch (IOException e) {
            e.printStackTrace();
        }
    }

    /**
     * Loads the Customer Management screen.
     */
    public void showCustomerManagement() { // Add this method
        try {
            FXMLLoader loader = new FXMLLoader(getClass().getResource("/fxml/customer.fxml"));
            Parent root = loader.load();
            CustomerController controller = loader.getController(); // Correctly cast to CustomerController
            controller.setApp(this); // Pass the App instance
            Scene scene = new Scene(root, 800, 600);
            scene.getStylesheets().add(getClass().getResource("/styles/styles.css").toExternalForm()); // Load styles.css
            primaryStage.setScene(scene);
            primaryStage.setTitle("Supermarket Management System - Customer Management");
        } catch (IOException e) {
            e.printStackTrace();
        }
    }
    public BranchService getBranchService() { // Add this method
        return branchService;
    }

    /**
     * Loads the Reports screen.
     */
    public void showReports() { // Add this method
        try {
            FXMLLoader loader = new FXMLLoader(getClass().getResource("/fxml/reports.fxml"));
            Parent root = loader.load();
            ReportController controller = loader.getController(); // Correctly cast to ReportController
            controller.setApp(this); // Pass the App instance
            Scene scene = new Scene(root, 800, 600);
            scene.getStylesheets().add(getClass().getResource("/styles/styles.css").toExternalForm()); // Load styles.css
            primaryStage.setScene(scene);
            primaryStage.setTitle("Supermarket Management System - Reports");
        } catch (IOException e) {
            e.printStackTrace();
        }
    }

    /**
     * Loads the User Management screen.
     */
    public void showUserManagement() { // Add this method
        try {
            FXMLLoader loader = new FXMLLoader(getClass().getResource("/fxml/user_management.fxml"));
            Parent root = loader.load();
            UserController controller = loader.getController(); // Correctly cast to UserController
            controller.setApp(this); // Pass the App instance
            Scene scene = new Scene(root, 800, 600);
            scene.getStylesheets().add(getClass().getResource("/styles/styles.css").toExternalForm()); // Load styles.css
            primaryStage.setScene(scene);
            primaryStage.setTitle("Supermarket Management System - User Management");
        } catch (IOException e) {
            e.printStackTrace();
        }
    }
    public void showDashboard() { // Ensure this method is public
        try {
            FXMLLoader loader = new FXMLLoader(getClass().getResource("/fxml/dashboard.fxml"));
            Parent root = loader.load();
            DashboardController controller = loader.getController(); // Correctly cast to DashboardController
            controller.setApp(this); // Pass the App instance
            Scene scene = new Scene(root, 800, 600);
            scene.getStylesheets().add(getClass().getResource("/styles/styles.css").toExternalForm()); // Load styles.css
            primaryStage.setScene(scene);
            primaryStage.setTitle("Supermarket Management System - Admin Dashboard");
        } catch (IOException e) {
            e.printStackTrace();
        }
    }

    /**
     * Loads the Sales Management screen.
     */
    public void showSalesManagement() {
        try {
            FXMLLoader loader = new FXMLLoader(getClass().getResource("/fxml/sales.fxml"));
            Parent root = loader.load();
            SalesController controller = loader.getController(); // Correctly cast to SalesController
            controller.setApp(this); // Pass the App instance
            Scene scene = new Scene(root, 800, 600);
            scene.getStylesheets().add(getClass().getResource("/styles/styles.css").toExternalForm()); // Load styles.css
            primaryStage.setScene(scene);
            primaryStage.setTitle("Supermarket Management System - Sales Management");
        } catch (IOException e) {
            e.printStackTrace();
        }
    }

    /**
     * Loads the Branch Management screen.
     */
    public void showBranchManagement() {
        try {
            FXMLLoader loader = new FXMLLoader(getClass().getResource("/fxml/branch.fxml"));
            Parent root = loader.load();
            BranchController controller = loader.getController(); // Correctly cast to BranchController
            controller.setApp(this); // Pass the App instance
            Scene scene = new Scene(root, 800, 600);
            scene.getStylesheets().add(getClass().getResource("/styles/styles.css").toExternalForm()); // Load styles.css
            primaryStage.setScene(scene);
            primaryStage.setTitle("Supermarket Management System - Branch Management");
        } catch (IOException e) {
            e.printStackTrace();
        }
    }
}                                              package com.supermarket.utils;

import java.util.Locale;
import java.util.ResourceBundle;

public class LocalizationUtil {
    private static Locale currentLocale = Locale.ENGLISH; // Default language is English

    /**
     * Sets the current language based on the locale.
     *
     * @param languageTag The language tag (e.g., "en" for English, "am" for Amharic).
     */
    public static void setLanguage(String languageTag) {
        if ("en".equalsIgnoreCase(languageTag)) {
            currentLocale = Locale.ENGLISH; // Set to English
        } else if ("am".equalsIgnoreCase(languageTag)) {
            currentLocale = new Locale("am"); // Set to Amharic
        } else {
            System.err.println("Unsupported language: " + languageTag);
        }
    }

    /**
     * Gets the currently selected language's locale.
     *
     * @return The current locale (e.g., Locale.ENGLISH or Locale.forLanguageTag("am")).
     */
    public static String getCurrentLanguage() {
        return currentLocale.getLanguage(); // Return the language code (e.g., "en", "am").
    }

    /**
     * Retrieves a localized string from the resource bundle.
     *
     * @param key The key for the string in the resource bundle.
     * @return The localized string.
     */
    public static String getLocalizedString(String key) {
        ResourceBundle bundle = ResourceBundle.getBundle("localization.messages", currentLocale);
        return bundle.getString(key);
    }
}                                             package com.supermarket.utils;

import org.mindrot.jbcrypt.BCrypt;

public class PasswordUtil {
    /**
     * Hashes the given password using BCrypt.
     *
     * @param password Plain-text password to hash.
     * @return The hashed password.
     */
    public static String hashPassword(String password) {
        return BCrypt.hashpw(password, BCrypt.gensalt(10)); // Cost factor of 10
    }

    /**
     * Verifies if the plain-text password matches the hashed password.
     *
     * @param plainPassword The plain-text password to verify.
     * @param hashedPassword The hashed password from the database.
     * @return True if the passwords match, false otherwise.
     */
    public static boolean verifyPassword(String plainPassword, String hashedPassword) {
        if (hashedPassword == null || !hashedPassword.startsWith("$2")) {
            System.err.println("Invalid hashed password format: " + hashedPassword);
            return false;
        }
        return BCrypt.checkpw(plainPassword, hashedPassword);
    }
}                                             <?xml version="1.0" encoding="UTF-8"?>

<?import javafx.scene.layout.VBox?>
<?import javafx.scene.control.Label?>
<?import javafx.scene.control.Button?>

<VBox xmlns="http://javafx.com/javafx/19" xmlns:fx="http://javafx.com/fxml/1"
      fx:controller="com.supermarket.presentation.controllers.BranchController">
    <Label text="Branch Management" />
    <Button text="Navigate Back" onAction="#navigateBack" />
</VBox>                                             <?xml version="1.0" encoding="UTF-8"?>

<?import javafx.scene.control.Button?>
<?import javafx.scene.control.Label?>
<?import javafx.scene.layout.VBox?>

<VBox xmlns="http://javafx.com/javafx/19" xmlns:fx="http://javafx.com/fxml/1" fx:controller="com.supermarket.presentation.controllers.CashierMenuController"
      alignment="CENTER" spacing="20" styleClass="root">
    <Label fx:id="welcomeLabel" styleClass="welcome-label" />
    <Button fx:id="salesButton" text="Sales Management" onAction="#showSalesManagement" styleClass="button primary-button" />
    <Button fx:id="inventoryButton" text="Product Management" onAction="#showProductManagement" styleClass="button secondary-button" />
    <Button fx:id="logoutButton" text="Logout" onAction="#logout" styleClass="button danger-button" />
    <Button fx:id="toggleLanguageButton" text="Toggle Language (Amharic/English)" onAction="#toggleLanguage" styleClass="toggle-language-button" />
</VBox>                                              <?xml version="1.0" encoding="UTF-8"?>

<?import javafx.scene.layout.VBox?>
<?import javafx.scene.control.Label?>
<?import javafx.scene.control.Button?>

<VBox xmlns="http://javafx.com/javafx/19" xmlns:fx="http://javafx.com/fxml/1"
      fx:controller="com.supermarket.presentation.controllers.CustomerController">
    <Label text="Customer Management" />
    <Button text="Navigate Back" onAction="#navigateBack" />
</VBox>                                         <?xml version="1.0" encoding="UTF-8"?>

<?import javafx.scene.control.Button?>
<?import javafx.scene.control.Label?>
<?import javafx.scene.layout.VBox?>
<?import javafx.scene.layout.BorderPane?>

<BorderPane xmlns="http://javafx.com/javafx/19" xmlns:fx="http://javafx.com/fxml/1" fx:controller="com.supermarket.presentation.controllers.DashboardController"
            styleClass="root">
    <top>
        <Label text="Supermarket Management System" styleClass="title" />
    </top>
    <center>
        <VBox alignment="CENTER" spacing="20" styleClass="content-box">
            <Label fx:id="welcomeLabel" styleClass="welcome-label" />
            <Button fx:id="userManagementButton" text="User Management" onAction="#showUserManagement" styleClass="button primary-button" />
            <Button fx:id="branchManagementButton" text="Branch Management" onAction="#showBranchManagement" styleClass="button secondary-button" />
            <Button fx:id="customerManagementButton" text="Customer Management" onAction="#showCustomerManagement" styleClass="button secondary-button" />
            <Button fx:id="salesManagementButton" text="Sales Management" onAction="#showSalesManagement" styleClass="button primary-button" />
            <Button fx:id="productManagementButton" text="Product Management" onAction="#showProductManagement" styleClass="button secondary-button" />
            <Button fx:id="reportsButton" text="Reports" onAction="#showReports" styleClass="button secondary-button" />
        </VBox>
    </center>
    <bottom>
        <Label text="Copyright © 2024 Supermarket Management System" styleClass="footer-text" />
    </bottom>
</BorderPane>                                     <?import javafx.scene.control.TableColumn?>
<?import javafx.scene.control.TextField?>
<?import javafx.scene.control.TableView?>
<?import javafx.scene.layout.HBox?>
<?import javafx.geometry.Insets?>
<?import javafx.scene.layout.VBox?>
<?import javafx.scene.control.ComboBox?>
<?import javafx.scene.control.Label?>
<?import javafx.scene.control.Button?>
<VBox xmlns="http://javafx.com/javafx/8" xmlns:fx="http://javafx.com/fxml/1" fx:controller="com.supermarket.presentation.controllers.InventoryController" spacing="10">
    <padding>
        <Insets top="10" right="10" bottom="10" left="10"/>
    </padding>

    <!-- Title -->
    <Label text="Product Management" style="-fx-font-size: 20; -fx-font-weight: bold;" />

    <!-- Branch Selection -->
    <HBox spacing="10">
        <ComboBox fx:id="branchComboBox" promptText="Select Branch" prefWidth="200" />
    </HBox>

    <!-- Input Fields -->
    <HBox spacing="10">
        <TextField fx:id="nameField" promptText="Enter product name" prefWidth="150" />
        <TextField fx:id="barcodeField" promptText="Enter barcode" prefWidth="150" />
        <TextField fx:id="priceField" promptText="Enter price" prefWidth="100" />
        <TextField fx:id="stockField" promptText="Enter stock" prefWidth="100" />
        <Button text="Add Product" onAction="#addProduct" style="-fx-font-weight: bold;" />
    </HBox>

    <!-- Product Table -->
    <TableView fx:id="productTable" prefHeight="300">
        <columns>
            <TableColumn fx:id="idColumn" text="ID" prefWidth="50" />
            <TableColumn fx:id="nameColumn" text="Name" prefWidth="150" />
            <TableColumn fx:id="barcodeColumn" text="Barcode" prefWidth="150" />
            <TableColumn fx:id="priceColumn" text="Price" prefWidth="100" />
            <TableColumn fx:id="stockColumn" text="Stock" prefWidth="100" />
        </columns>
    </TableView>
</VBox>                                                          <?xml version="1.0" encoding="UTF-8"?>

<?import javafx.scene.layout.VBox?>
<?import javafx.scene.control.Label?>
<?import javafx.scene.control.TextField?>
<?import javafx.scene.control.PasswordField?>
<?import javafx.scene.control.ComboBox?>
<?import javafx.scene.control.Button?>

<?import javafx.scene.layout.HBox?>
<?import java.lang.String?>
<VBox xmlns:fx="http://javafx.com/fxml/1" fx:controller="com.supermarket.presentation.controllers.LoginController" spacing="20" alignment="CENTER" prefWidth="400" prefHeight="300" style="-fx-padding: 20;">
    <!-- Stylesheet Reference -->
    <stylesheets>
        <String fx:value="/styles/styles.css" />
    </stylesheets>

    <!-- Title -->
    <Label text="Supermarket Login" style="-fx-font-size: 20; -fx-font-weight: bold;" />

    <!-- Username Field -->
    <HBox alignment="CENTER" spacing="10">
        <Label text="Username:" />
        <TextField fx:id="usernameField" promptText="Enter your username" prefWidth="200" />
    </HBox>

    <!-- Password Field -->
    <HBox alignment="CENTER" spacing="10">
        <Label text="Password:" />
        <PasswordField fx:id="passwordField" promptText="Enter your password" prefWidth="200" />
    </HBox>

    <!-- Branch Selection -->
    <HBox alignment="CENTER" spacing="10">
        <Label text="Branch:" />
        <ComboBox fx:id="branchComboBox" prefWidth="200" promptText="Select a branch" />
    </HBox>

    <!-- Login Button -->
    <Button text="Login" onAction="#handleLogin" style="-fx-background-color: #4CAF50; -fx-text-fill: white;" prefWidth="100" />

    <!-- Error Message (Optional) -->
    <Label fx:id="errorMessage" text="" style="-fx-text-fill: red;" visible="false" managed="false" />
</VBox>                                                      <!-- NavigationBar.fxml -->
<?import javafx.scene.control.Button?>
<?import javafx.scene.layout.VBox?>
<VBox xmlns="http://javafx.com/javafx/19" xmlns:fx="http://javafx.com/fxml/1">
    <Button text="Sales Management" onAction="#showSalesManagement" />
    <Button text="Product Management" onAction="#showProductManagement" />
    <Button text="Customer Management" onAction="#showCustomerManagement" />
    <Button text="Branch Management" onAction="#showBranchManagement" />
</VBox>                                  <?xml version="1.0" encoding="UTF-8"?>
<?import javafx.geometry.Insets?>
<?import javafx.scene.control.Button?>
<?import javafx.scene.control.ComboBox?>
<?import javafx.scene.control.Label?>
<?import javafx.scene.control.TableColumn?>
<?import javafx.scene.control.TableView?>
<?import javafx.scene.control.TextField?>
<?import javafx.scene.control.cell.PropertyValueFactory?>
<?import javafx.scene.layout.HBox?>
<?import javafx.scene.layout.VBox?>

<VBox xmlns="http://javafx.com/javafx/8" xmlns:fx="http://javafx.com/fxml/1" fx:controller="com.supermarket.presentation.controllers.SalesController" spacing="10">
    <padding>
        <Insets top="10" right="10" bottom="10" left="10"/>
    </padding>

    <!-- Title -->
    <Label text="Sales Management" style="-fx-font-size: 20; -fx-font-weight: bold;" />

    <!-- Branch Selection -->
    <HBox spacing="10">
        <Label text="Select Branch:" />
        <ComboBox fx:id="branchComboBox" promptText="Select Branch" prefWidth="200" />
    </HBox>

    <!-- Product Table -->
    <TableView fx:id="productTable" prefHeight="200">
        <columns>
            <TableColumn fx:id="nameColumn" text="Name" prefWidth="150">
                <cellValueFactory>
                    <PropertyValueFactory property="name" />
                </cellValueFactory>
            </TableColumn>
            <TableColumn fx:id="priceColumn" text="Price" prefWidth="100">
                <cellValueFactory>
                    <PropertyValueFactory property="price" />
                </cellValueFactory>
            </TableColumn>
            <TableColumn fx:id="stockColumn" text="Stock" prefWidth="100">
                <cellValueFactory>
                    <PropertyValueFactory property="stock" />
                </cellValueFactory>
            </TableColumn>
        </columns>
    </TableView>

    <!-- Quantity Field and Add to Cart Button -->
    <HBox spacing="10">
        <TextField fx:id="quantityField" promptText="Quantity" prefWidth="100" />
        <Button text="Add to Cart" onAction="#addToCart" style="-fx-font-weight: bold;" />
    </HBox>

    <!-- Discount Field -->
    <HBox spacing="10">
        <Label text="Discount (%):" />
        <TextField fx:id="discountField" promptText="Enter discount" prefWidth="100" />
    </HBox>

    <!-- Total Price -->
    <HBox spacing="10">
        <Label text="Total Price:" />
        <TextField fx:id="totalPriceField" editable="false" prefWidth="100" />
    </HBox>

    <!-- Process Sale Button -->
    <Button text="Process Sale" onAction="#processSale" style="-fx-font-weight: bold;" />
</VBox>                                     <?xml version="1.0" encoding="UTF-8"?>

<?import javafx.scene.control.*?>
<?import javafx.scene.layout.*?>
<?import javafx.scene.text.*?>

<VBox xmlns="http://javafx.com/javafx/19" xmlns:fx="http://javafx.com/fxml/1" fx:controller="com.supermarket.presentation.controllers.UserController"
      alignment="CENTER" spacing="20" styleClass="root">
    <Label text="User Management" styleClass="title" />
    <TextField fx:id="usernameField" promptText="Username" styleClass="text-field" />
    <PasswordField fx:id="passwordField" promptText="Password" styleClass="password-field" />
    <ComboBox fx:id="roleComboBox" promptText="Role" styleClass="combo-box" />
    <ComboBox fx:id="branchComboBox" promptText="Branch" styleClass="combo-box" />
    <Button text="Add User" onAction="#addUser" styleClass="button primary-button" />
    <Button text="Update User" onAction="#updateUser" styleClass="button secondary-button" />
</VBox>                                       # General Messages
welcome=???? ????? {0}!
logout=???
toggle_language=??? ????? (????/?????)

# Error Messages
error=??????
invalid_input=???? ??
database_error=??? ??????
user_not_found=?? ?????? ??????
authentication_failed=??? ??????
no_branches_configured=????? ??????? ???????? ????? ?????? ???? ????? ????
select_a_branch=???? ??? ????
invalid_username_password=??????? ?? ????? ????? ??????
failed_to_load={0} ?? ????? ??????: {1}
navigation_failed=???? ??????

# Success Messages
success=????
login_successful=??? ???!
operation_successful={0} ???!

# Labels
username=?????? ??:
password=?????:
branch=????:
role=???:
name=??:
barcode=????:
price=????:
stock=??????:
quantity=????:
discount=??????? ???:
total_price=? ??:

# Buttons
add=????
update=??????
delete=???
submit=???
cancel=??????

# Titles
login_title=???
dashboard_title=???????? ??????
sales_title=????
inventory_title=??????? ??????
reports_title=?????
branch_title=???? ??????
customer_title=angganakan management

# Dashboard Welcome Message
welcome_admin=???? ????? ?????????!

# Module Names
user_management=?????? ??????
branch_management=???? ??????
customer_management=angganakan management
sales_management=????
product_management=?????? ??????
reports=?????

# Language Toggle Success
language_toggled_successfully=??? ??????!

# Footer
copyright=?opyright © 2024 Supermarket Management System 
                                                                  # General Messages
welcome=Welcome, {0}!
logout=Logout
toggle_language=Toggle Language (Amharic/English)

# Error Messages
error=Error
invalid_input=Invalid Input
database_error=Database Error
user_not_found=User not found
authentication_failed=Authentication Failed
no_branches_configured=No branches are configured in the system. Please contact the administrator.
select_a_branch=Please select a branch.
invalid_username_password=Invalid username or password.
failed_to_load=Failed to load {0}: {1}
navigation_failed=Navigation failed.

# Success Messages
success=Success
login_successful=Login successful!
operation_successful={0} successful!

# Labels
username=Username:
password=Password:
branch=Branch:
role=Role:
name=Name:
barcode=Barcode:
price=Price:
stock=Stock:
quantity=Quantity:
discount=Discount:
total_price=Total Price:

# Buttons
add=Add
update=Update
delete=Delete
submit=Submit
cancel=Cancel

# Titles
login_title=Login
dashboard_title=Admin Dashboard
sales_title=Sales Management
inventory_title=Product Management
reports_title=Reports
branch_title=Branch Management
customer_title=Customer Management

# Dashboard Welcome Message
welcome_admin=Welcome, Administrator!

# Module Names
user_management=User Management
branch_management=Branch Management
customer_management=Customer Management
sales_management=Sales Management
product_management=Product Management
reports=Reports

# Language Toggle Success
language_toggled_successfully=Language toggled successfully!

# Footer
copyright=Copyright © 2024 Supermarket Management System         


  /* General Styles */
.root {
    -fx-background-color: #f5f5f5; /* Light gray background */
    -fx-font-family: "Segoe UI", Arial, sans-serif;
}

/* Title Styles */
.title {
    -fx-font-size: 24px;
    -fx-font-weight: bold;
    -fx-text-fill: #333333; /* Dark gray text */
    -fx-padding: 10px 0;
}

/* TextField and PasswordField Styles */
.text-field, .password-field {
    -fx-background-color: #ffffff; /* White background */
    -fx-border-color: #cccccc; /* Light gray border */
    -fx-border-radius: 5px;
    -fx-padding: 5px;
    -fx-font-size: 14px;
}

/* ComboBox Styles */
.combo-box {
    -fx-background-color: #ffffff; /* White background */
    -fx-border-color: #cccccc; /* Light gray border */
    -fx-border-radius: 5px;
    -fx-padding: 5px;
    -fx-font-size: 14px;
}

/* Button Styles */
.button {
    -fx-background-color: #4CAF50; /* Green background */
    -fx-text-fill: #ffffff; /* White text */
    -fx-font-size: 14px;
    -fx-padding: 10px 20px;
    -fx-border-radius: 5px;
    -fx-cursor: hand;
}

.button:hover {
    -fx-background-color: #45a049; /* Darker green on hover */
}

/* Primary Button (e.g., Save, Submit) */
.primary-button {
    -fx-background-color: #007bff; /* Blue background */
}

.primary-button:hover {
    -fx-background-color: #0056b3; /* Darker blue on hover */
}

/* Secondary Button (e.g., Cancel, Back) */
.secondary-button {
    -fx-background-color: #6c757d; /* Gray background */
}

.secondary-button:hover {
    -fx-background-color: #5a6268; /* Darker gray on hover */
}

/* Danger Button (e.g., Delete) */
.danger-button {
    -fx-background-color: #dc3545; /* Red background */
}

.danger-button:hover {
    -fx-background-color: #c82333; /* Darker red on hover */
}

/* Toggle Language Button */
.toggle-language-button {
    -fx-background-color: #ffc107; /* Yellow background */
    -fx-text-fill: #000000; /* Black text */
}

.toggle-language-button:hover {
    -fx-background-color: #e0a800; /* Darker yellow on hover */
}       

<?xml version="1.0" encoding="UTF-8"?>
<project xmlns="http://maven.apache.org/POM/4.0.0"
         xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
    <modelVersion>4.0.0</modelVersion>
    <groupId>com.supermarket</groupId>
    <artifactId>supermarket-management-system</artifactId>
    <version>1.0-SNAPSHOT</version>
    <packaging>jar</packaging>
    <name>Supermarket Management System</name>
    <description>Supermarket Management System for Inventory, Sales, and Reports</description>
    <!-- Properties for Java version and encoding -->
    <properties>
        <maven.compiler.source>17</maven.compiler.source>
        <maven.compiler.target>17</maven.compiler.target>
        <encoding>UTF-8</encoding>
        <javafx.version>19</javafx.version>
        <sqlite.version>3.36.0.3</sqlite.version>
        <junit.version>5.10.2</junit.version>
        <commons-lang3.version>3.12.0</commons-lang3.version>
        <apache.poi.version>5.2.3</apache.poi.version> <!-- Added for Excel reporting -->
        <zxing.version>3.5.1</zxing.version> <!-- Added for barcode scanning -->
    </properties>
    <!-- Dependencies -->
    <dependencies>
        <!-- JavaFX Dependencies -->
        <dependency>
            <groupId>org.openjfx</groupId>
            <artifactId>javafx-controls</artifactId>
            <version>${javafx.version}</version>
        </dependency>
        <dependency>
            <groupId>org.openjfx</groupId>
            <artifactId>javafx-fxml</artifactId>
            <version>${javafx.version}</version>
        </dependency>
        <!-- SQLite JDBC Driver -->
        <dependency>
            <groupId>org.xerial</groupId>
            <artifactId>sqlite-jdbc</artifactId>
            <version>${sqlite.version}</version>
        </dependency>
        <!-- JUnit 5 Dependencies for Testing -->
        <dependency>
            <groupId>org.junit.jupiter</groupId>
            <artifactId>junit-jupiter-api</artifactId>
            <version>${junit.version}</version>
            <scope>test</scope>
        </dependency>
        <dependency>
            <groupId>org.junit.jupiter</groupId>
            <artifactId>junit-jupiter-engine</artifactId>
            <version>${junit.version}</version>
            <scope>test</scope>
        </dependency>
        <!-- Apache Commons Lang for utility classes -->
        <dependency>
            <groupId>org.apache.commons</groupId>
            <artifactId>commons-lang3</artifactId>
            <version>${commons-lang3.version}</version>
        </dependency>
        <!-- Logging with SLF4J and Logback -->
        <dependency>
            <groupId>org.slf4j</groupId>
            <artifactId>slf4j-api</artifactId>
            <version>1.7.36</version>
        </dependency>
        <dependency>
            <groupId>ch.qos.logback</groupId>
            <artifactId>logback-classic</artifactId>
            <version>1.2.11</version>
        </dependency>
        <dependency>
            <groupId>org.mindrot</groupId>
            <artifactId>jbcrypt</artifactId>
            <version>0.4</version>
        </dependency>
        <!-- SLF4J API -->
            <dependency>
                <groupId>org.slf4j</groupId>
                <artifactId>slf4j-api</artifactId>
                <version>1.7.36</version>
            </dependency>

            <!-- Logback Implementation -->
            <dependency>
                <groupId>ch.qos.logback</groupId>
                <artifactId>logback-classic</artifactId>
                <version>1.2.11</version>
            </dependency>

        <!-- Apache POI for Excel Reporting -->
        <dependency>
            <groupId>org.apache.poi</groupId>
            <artifactId>poi-ooxml</artifactId>
            <version>${apache.poi.version}</version>
        </dependency>
        <dependency>
            <groupId>com.zaxxer</groupId>
            <artifactId>HikariCP</artifactId>
            <version>5.0.1</version>
        </dependency>
        <!-- ZXing for Barcode Scanning -->
        <dependency>
            <groupId>com.google.zxing</groupId>
            <artifactId>core</artifactId>
            <version>${zxing.version}</version>
        </dependency>
        <dependency>
            <groupId>com.google.zxing</groupId>
            <artifactId>javase</artifactId>
            <version>${zxing.version}</version>
        </dependency>
    </dependencies>
    <!-- Build Configuration -->
    <build>
        <resources>
            <resource>
                <directory>src/main/resources</directory>
                <includes>
                    <include>**/*.fxml</include>
                    <include>**/*.properties</include>
                    <include>**/*.css</include>
                </includes>
            </resource>
        </resources>

        <plugins>
            <!-- Maven Compiler Plugin -->
            <plugin>
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-compiler-plugin</artifactId>
                <version>3.8.1</version>
                <configuration>
                    <source>${maven.compiler.source}</source>
                    <target>${maven.compiler.target}</target>
                </configuration>
            </plugin>
            <!-- Maven Surefire Plugin for Running Tests -->
            <plugin>
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-surefire-plugin</artifactId>
                <version>3.0.0-M5</version>
                <configuration>
                    <includes>
                        <include>**/*Test.java</include>
                    </includes>
                </configuration>
            </plugin>
            <!-- JavaFX Maven Plugin -->
            <plugin>
                <groupId>org.openjfx</groupId>
                <artifactId>javafx-maven-plugin</artifactId>
                <version>0.0.8</version>
                <configuration>
                    <mainClass>com.supermarket.presentation.App</mainClass>
                </configuration>
            </plugin>
            <!-- Maven Jar Plugin for Packaging -->
            <plugin>
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-jar-plugin</artifactId>
                <version>3.3.0</version>
                <configuration>
                    <archive>
                        <manifest>
                            <addClasspath>true</addClasspath>
                            <mainClass>com.supermarket.presentation.App</mainClass>
                        </manifest>
                    </archive>
                </configuration>
            </plugin>
            <!-- Maven Assembly Plugin for Creating a Fat JAR -->
            <plugin>
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-assembly-plugin</artifactId>
                <version>3.3.0</version>
                <configuration>
                    <descriptorRefs>
                        <descriptorRef>jar-with-dependencies</descriptorRef>
                    </descriptorRefs>
                    <archive>
                        <manifest>
                            <mainClass>com.supermarket.presentation.App</mainClass>
                        </manifest>
                    </archive>
                </configuration>
                <executions>
                    <execution>
                        <id>make-assembly</id>
                        <phase>package</phase>
                        <goals>
                            <goal>single</goal>
                        </goals>
                    </execution>
                </executions>
            </plugin>
        </plugins>
    </build>
    <!-- Repositories Section -->
    <repositories>
        <repository>
            <id>central</id>
            <url>https://repo.maven.apache.org/maven2</url>
        </repository>
    </repositories>
    <!-- Plugin Repositories Section -->
    <pluginRepositories>
        <pluginRepository>
            <id>central</id>
            <url>https://repo.maven.apache.org/maven2</url>
        </pluginRepository>
    </pluginRepositories>
</project>                                                                                 